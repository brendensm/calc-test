[{"name":"app.R","content":"library(shiny)\nlibrary(dplyr)\n\nui <- fluidPage(\n  tags$head(\n    tags$style(HTML(\"\n      .green-result { color: green; font-weight: bold; }\n      .yellow-result { color: orange; font-weight: bold; }\n      .red-result { color: red; font-weight: bold; }\n    \"))\n  ),\n  \ntabsetPanel(type = \"pills\",\n  tabPanel(\"Calculator\",\n  \n  titlePanel(\"Beverage Input Validator\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      # Beverage Type Selection\n      selectInput(\"beverage_type\", \"Select Beverage Type:\", \n                  choices = c( \"Juice\", \"Milk\", \"Other\"), selected = \"Juice\"),\n      \n      textInput(\"beverage_name\", \"Beverage Name:\", placeholder = \"Optional\"),\n      \n      # Conditional Panels for Different Beverage Types\n      conditionalPanel(\n        condition = \"input.beverage_type == 'Juice'\",\n\n        numericInput(\"juice_serving_size\", \"Serving Size (oz):\", \n                     min = 0, value = NULL),\n        radioButtons(\"is_100_percent\", \"Is this 100% Juice?\", \n                     choices = c(\"Yes\" = TRUE, \"No\" = FALSE))\n      ),\n      \n      conditionalPanel(\n        condition = \"input.beverage_type == 'Milk'\",\n\n        radioButtons(\"is_flavored\", \"Is the milk flavored?\", \n                     choices = c(\"Yes\" = TRUE, \"No\" = FALSE)),\n        radioButtons(\"is_sweetened\", \"Is the milk sweetened?\", \n                     choices = c(\"Yes\" = TRUE, \"No\" = FALSE))\n      ),\n      \n      conditionalPanel(\n        condition = \"input.beverage_type == 'Other'\",\n\n        numericInput(\"total_sugar\", \"Total Sugar (grams):\", \n                     min = 0, value = NULL),\n        numericInput(\"added_sugar\", \"Added Sugar (grams):\", \n                     min = 0, value = NULL)\n      ),\n      \n      # Submit Button\n      \n      \n      #radioButtons(\"save_data\", \"Save Data?\", choices = c(\"Yes\", \"No\"), selected = \"No\", inline = TRUE),\n      \n      \n      \n      # Download Button\n      \n     # conditionalPanel(\n        #condition = \"input.save_data == 'Yes'\",\n        \n        actionButton(\"submit\", \"Submit\"),\n        \n        downloadButton(\"download_data\", \"Download Submissions\")\n    #  ),\n      \n      # conditionalPanel(\n      #   condition = \"input.save_data == 'No'\",\n      #   actionButton(\"submit\", \"Submit\"),\n      # ),\n\n    ),\n    \n    mainPanel(\n      \n      # Color-coded Recommendation\n      uiOutput(\"recommendation\"),\n      \n      # Submissions Table\n      h3(\"Submitted Beverages:\"),\n      tableOutput(\"submissions_table\")\n    )\n  )\n),\n\ntabPanel(\"About\",\n         \n      h2(\"This is an about page.\"),\n      \n      p(\"Here is some text on the page.\")\n  \n)\n\n)\n)\n\nserver <- function(input, output, session) {\n  # Reactive values to store submissions\n  submissions <- reactiveVal(data.frame(\n    Timestamp = character(),\n    BeverageType = character(),\n    BeverageName = character(),\n    Recommendation = character(),\n    Reason = character(),\n    stringsAsFactors = FALSE\n  ))\n  \n  # Reactive validation function\n  validate_beverage <- eventReactive(input$submit, {\n    # Check if beverage type is selected\n    if (input$beverage_type == \"\") {\n      return(list(\n        message = \"Error: Please select a beverage type.\",\n        recommendation = \"\",\n        color = \"\"\n      ))\n    }\n    \n    # Validation for Milk\n    if (input$beverage_type == \"Milk\") {\n      # Ensure both flavored and sweetened status are selected\n      if (is.null(input$is_flavored) || is.null(input$is_sweetened)) {\n        return(list(\n          message = \"Error: Please specify if milk is flavored and sweetened.\",\n          recommendation = \"\",\n          color = \"\"\n        ))\n      }\n      \n      # Determine recommendation for milk\n      if (input$is_flavored == \"FALSE\" && input$is_sweetened == \"FALSE\") {\n        recommendation_text <- \"GO FOR IT\"\n        recommendation_color <- \"green\"\n        reason <-  NA\n      } else {\n        recommendation_text <- \"MAYBE NOT\"\n        recommendation_color <- \"red\"\n        \n        if(input$is_flavored == \"FALSE\" && input$is_sweetened == \"TRUE\"){\n          reason <- \"Milk sweetened\"\n        }else if (input$is_flavored == \"TRUE\" && input$is_sweetened == \"FALSE\"){\n          reason <- \"Milk flavored\"\n        }else{\n          reason <- \"Milk flavored and sweetened\"\n        }\n        \n      }\n      \n      # Add submission to data frame\n      new_submission <- data.frame(\n        Timestamp = as.character(Sys.Date()),\n        BeverageType = \"Milk\",\n        BeverageName = input$beverage_name,\n        Recommendation = recommendation_text,\n        Reason = reason,\n        stringsAsFactors = FALSE\n      )\n      \n      # Update submissions\n      current_submissions <- submissions()\n      submissions(rbind(current_submissions, new_submission))\n      \n      # Construct milk validation message\n      return(list(\n        recommendation = recommendation_text,\n        color = recommendation_color\n      ))\n    }\n    \n    # Validation for Juice\n    if (input$beverage_type == \"Juice\") {\n      # Check serving size\n      if (is.null(input$juice_serving_size) || input$juice_serving_size <= 0) {\n        return(list(\n          message = \"Error: Please enter a valid serving size for juice (greater than 0 oz).\",\n          recommendation = \"\",\n          color = \"\"\n        ))\n      }\n\n      # Determine recommendation for juice\n      if (input$is_100_percent == \"TRUE\" && input$juice_serving_size <= 12) {\n        recommendation_text <- \"OK SOMETIMES\"\n        recommendation_color <- \"yellow\"\n        reason <- NA\n      } else {\n        recommendation_text <- \"MAYBE NOT\"\n        recommendation_color <- \"red\"\n        \n        if(input$is_100_percent == \"FALSE\" && input$juice_serving_size <= 12){\n          reason <- \"Not 100% juice\"\n        }else if (input$is_100_percent == \"TRUE\" && input$juice_serving_size > 12){\n          reason <- \"Serving size > 12 oz\"\n        }else{\n          reason <- \"Not 100% juice, Serving size > 12 oz\"\n        }\n        \n      }\n      \n      # Add submission to data frame\n      new_submission <- data.frame(\n        Timestamp = as.character(Sys.Date()),\n        BeverageType = \"Juice\",\n        BeverageName = input$beverage_name,\n        Recommendation = recommendation_text,\n        Reason = reason,\n        stringsAsFactors = FALSE\n      )\n      \n      # Update submissions\n      current_submissions <- submissions()\n      submissions(rbind(current_submissions, new_submission))\n      \n      # Construct juice validation message\n      return(list(\n        message = paste(\n          \"Juice Validation:\",\n          \"\\n- Beverage Name:\", input$beverage_name,\n          \"\\n- Serving Size:\", input$juice_serving_size, \"oz\",\n          \"\\n- 100% Juice:\", ifelse(input$is_100_percent, \"Yes\", \"No\")\n        ),\n        recommendation = recommendation_text,\n        color = recommendation_color\n      ))\n    }\n    \n    # Validation for Other Drinks\n    if (input$beverage_type == \"Other\") {\n      # Check total sugar input\n      if (is.null(input$total_sugar) || is.na(input$total_sugar) || input$total_sugar < 0) {\n        return(list(\n          message = \"Error: Please enter a valid total sugar amount (0 or greater).\",\n          recommendation = \"\",\n          color = \"\"\n        ))\n      }\n      \n      # Check added sugar input\n      if (is.null(input$added_sugar) || is.na(input$added_sugar) || input$added_sugar < 0) {\n        return(list(\n          message = \"Error: Please enter a valid added sugar amount (0 or greater).\",\n          recommendation = \"\",\n          color = \"\"\n        ))\n      }\n      \n      # Check that added sugar doesn't exceed total sugar\n      if (input$added_sugar > input$total_sugar) {\n        return(list(\n          message = \"Error: Added sugar cannot be greater than total sugar.\",\n          recommendation = \"\",\n          color = \"\"\n        ))\n      }\n      \n      # Determine recommendation for other drinks\n      if (input$total_sugar <= 12 && input$added_sugar == 0) {\n        recommendation_text <- \"GO FOR IT\"\n        recommendation_color <- \"green\"\n        \n        reason <- NA\n        \n      } else if ((input$total_sugar > 12 && input$total_sugar <= 24) && input$added_sugar <= 12) {\n        recommendation_text <- \"OK SOMETIMES\"\n        recommendation_color <- \"yellow\"\n        \n        reason <- NA\n        \n      } else {\n        recommendation_text <- \"MAYBE NOT\"\n        recommendation_color <- \"red\"\n        \n        if(!(input$total_sugar > 12 && input$total_sugar <= 24) && input$added_sugar <= 12){\n          reason <- \"Total sugar > 24g\"\n        }else if ((input$total_sugar > 12 && input$total_sugar <= 24) && !(input$added_sugar <= 12)){\n          reason <- \"Added sugar > 12g\"\n        }else{\n          reason <- \"Total sugar > 24g, Added sugar > 12g\"\n        }\n        \n      }\n      \n      # Add submission to data frame\n      new_submission <- data.frame(\n        Timestamp = as.character(Sys.Date()),\n        BeverageType = \"Other\",\n        BeverageName = input$beverage_name,\n        Recommendation = recommendation_text,\n        Reason = reason,\n        stringsAsFactors = FALSE\n      )\n      \n      # Update submissions\n      current_submissions <- submissions()\n      submissions(rbind(current_submissions, new_submission))\n      \n      # Construct other drink validation message\n      return(list(\n        message = paste(\n          \"Other Drink Validation:\",\n          \"\\n- Beverage Name:\", input$beverage_name,\n          \"\\n- Total Sugar:\", input$total_sugar, \"g\",\n          \"\\n- Added Sugar:\", input$added_sugar, \"g\"\n        ),\n        recommendation = recommendation_text,\n        color = recommendation_color\n      ))\n    }\n  })\n  \n  \n  # Render color-coded recommendation\n  output$recommendation <- renderUI({\n    validate_result <- validate_beverage()\n    \n    if (!is.null(validate_result$recommendation) && validate_result$recommendation != \"\") {\n      div(\n        class = paste0(validate_result$color, \"-result\"),\n        h3(validate_result$recommendation)\n      )\n    }\n  })\n  \n  # Render submissions table\n  output$submissions_table <- renderTable({\n    submissions()\n  })\n  \n  # Download handler for CSV\n  output$download_data <- downloadHandler(\n    filename = function() {\n      paste(\"beverage_data_\", Sys.Date(), \".csv\", sep=\"\")\n    },\n    content = function(file) {\n      write.csv(submissions(), file, row.names = FALSE)\n    }\n  )\n}\n\n# Run the application \nshinyApp(ui, server)","type":"text"}]
